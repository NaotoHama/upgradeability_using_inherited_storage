{
  "contractName": "Upgradeable",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract holds all the minimum required functionality for a behavior to be upgradeable.\\r This means, required state variables for owned upgradeability purpose and simple initialization validation.\\r\",\"methods\":{\"getImplementation()\":{\"details\":\"Tells the address of the current implementation\\r\",\"return\":\"address of the current implementation\\r\"},\"initialize(address)\":{\"details\":\"Validates the caller is the versions registry.\\r THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\\r\",\"params\":{\"sender\":\"representing the address deploying the initial behavior of the contract\\r\"}}},\"title\":\"Upgradeable\\r\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/Upgradeable.sol\":\"Upgradeable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/IRegistry.sol\":{\"keccak256\":\"0x8f06fb293878d5f300929f507ff2275b34b7a010edc40546f079e85041993dd9\",\"urls\":[\"bzzr://e9d62adf93f485499956429a6dab72575017b2739ddc7fa2fa9fd21aec8ad6d3\"]},\"/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/UpgradeabilityStorage.sol\":{\"keccak256\":\"0xa6f2a71d8cac53a1a09a4b39eb147b4a0640407b2a77b3e88572ff05e3251de3\",\"urls\":[\"bzzr://ce6ae46f50240871e42dc0da9a97899bb368aab32874ab4c7a9cad4f43b6e96c\"]},\"/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/Upgradeable.sol\":{\"keccak256\":\"0xf45e78279b6c3e099c1c83237fb99fb393c35f07c6d8dfec92667e50000b265a\",\"urls\":[\"bzzr://11cd01c607f43a024488c27b14e175a268ab75bb0113850f58a04355eeda449b\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101ad806100206000396000f3fe60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063aaf10f4214610051578063c4d66de8146100a8575b600080fd5b34801561005d57600080fd5b506100666100f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100b457600080fd5b506100f7600480360360208110156100cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610123565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561017e57600080fd5b5056fea165627a7a72305820eba46c2063bde44a1f3ab91dfb797de541da0fdaf737d390853538a3a3e135f40029",
  "deployedBytecode": "0x60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063aaf10f4214610051578063c4d66de8146100a8575b600080fd5b34801561005d57600080fd5b506100666100f9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100b457600080fd5b506100f7600480360360208110156100cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610123565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561017e57600080fd5b5056fea165627a7a72305820eba46c2063bde44a1f3ab91dfb797de541da0fdaf737d390853538a3a3e135f40029",
  "sourceMap": "315:365:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;315:365:7;;;;;;;",
  "deployedSourceMap": "315:365:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;498:94:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;498:94:6;;;;;;;;;;;;;;;;;;;;;;;;;;;581:96:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;581:96:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;581:96:7;;;;;;;;;;;;;;;;;;;;;;498:94:6;548:7;571:15;;;;;;;;;;;564:22;;498:94;:::o;581:96:7:-;661:8;;;;;;;;;;;639:31;;:10;:31;;;631:40;;;;;;;;581:96;:::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport './UpgradeabilityStorage.sol';\r\n\r\n/**\r\n * @title Upgradeable\r\n * @dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\r\n * This means, required state variables for owned upgradeability purpose and simple initialization validation.\r\n */\r\ncontract Upgradeable is UpgradeabilityStorage {\r\n  /**\r\n  * @dev Validates the caller is the versions registry.\r\n  * THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r\n  * @param sender representing the address deploying the initial behavior of the contract\r\n  */\r\n  function initialize(address sender) public {\r\n    require(msg.sender == address(registry));\r\n  }\r\n}\r\n",
  "sourcePath": "C:\\Users\\NaotoHama\\Documents\\blockchain\\upgradeability_using_inherited_storage\\contracts\\Upgradeable.sol",
  "ast": {
    "absolutePath": "/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/Upgradeable.sol",
    "exportedSymbols": {
      "Upgradeable": [
        367
      ]
    },
    "id": 368,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 348,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/UpgradeabilityStorage.sol",
        "file": "./UpgradeabilityStorage.sol",
        "id": 349,
        "nodeType": "ImportDirective",
        "scope": 368,
        "sourceUnit": 347,
        "src": "27:37:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 350,
              "name": "UpgradeabilityStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 346,
              "src": "339:21:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UpgradeabilityStorage_$346",
                "typeString": "contract UpgradeabilityStorage"
              }
            },
            "id": 351,
            "nodeType": "InheritanceSpecifier",
            "src": "339:21:7"
          }
        ],
        "contractDependencies": [
          346
        ],
        "contractKind": "contract",
        "documentation": "@title Upgradeable\r\n@dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\r\nThis means, required state variables for owned upgradeability purpose and simple initialization validation.\r",
        "fullyImplemented": true,
        "id": 367,
        "linearizedBaseContracts": [
          367,
          346
        ],
        "name": "Upgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 365,
              "nodeType": "Block",
              "src": "624:53:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 362,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 357,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 382,
                            "src": "639:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "639:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 360,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 335,
                              "src": "661:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$121",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$121",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "653:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "653:17:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "639:31:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 356,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        385,
                        386
                      ],
                      "referencedDeclaration": 385,
                      "src": "631:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "631:40:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 364,
                  "nodeType": "ExpressionStatement",
                  "src": "631:40:7"
                }
              ]
            },
            "documentation": "@dev Validates the caller is the versions registry.\r\nTHIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r\n@param sender representing the address deploying the initial behavior of the contract\r",
            "id": 366,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 354,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 353,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 366,
                  "src": "601:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 352,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "601:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "600:16:7"
            },
            "returnParameters": {
              "id": 355,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "624:0:7"
            },
            "scope": 367,
            "src": "581:96:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 368,
        "src": "315:365:7"
      }
    ],
    "src": "0:682:7"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/Upgradeable.sol",
    "exportedSymbols": {
      "Upgradeable": [
        367
      ]
    },
    "id": 368,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 348,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/C/Users/NaotoHama/Documents/blockchain/upgradeability_using_inherited_storage/contracts/UpgradeabilityStorage.sol",
        "file": "./UpgradeabilityStorage.sol",
        "id": 349,
        "nodeType": "ImportDirective",
        "scope": 368,
        "sourceUnit": 347,
        "src": "27:37:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 350,
              "name": "UpgradeabilityStorage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 346,
              "src": "339:21:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_UpgradeabilityStorage_$346",
                "typeString": "contract UpgradeabilityStorage"
              }
            },
            "id": 351,
            "nodeType": "InheritanceSpecifier",
            "src": "339:21:7"
          }
        ],
        "contractDependencies": [
          346
        ],
        "contractKind": "contract",
        "documentation": "@title Upgradeable\r\n@dev This contract holds all the minimum required functionality for a behavior to be upgradeable.\r\nThis means, required state variables for owned upgradeability purpose and simple initialization validation.\r",
        "fullyImplemented": true,
        "id": 367,
        "linearizedBaseContracts": [
          367,
          346
        ],
        "name": "Upgradeable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 365,
              "nodeType": "Block",
              "src": "624:53:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 362,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 357,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 382,
                            "src": "639:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 358,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "639:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 360,
                              "name": "registry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 335,
                              "src": "661:8:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IRegistry_$121",
                                "typeString": "contract IRegistry"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_IRegistry_$121",
                                "typeString": "contract IRegistry"
                              }
                            ],
                            "id": 359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "653:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "653:17:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "639:31:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 356,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        385,
                        386
                      ],
                      "referencedDeclaration": 385,
                      "src": "631:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 363,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "631:40:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 364,
                  "nodeType": "ExpressionStatement",
                  "src": "631:40:7"
                }
              ]
            },
            "documentation": "@dev Validates the caller is the versions registry.\r\nTHIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r\n@param sender representing the address deploying the initial behavior of the contract\r",
            "id": 366,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 354,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 353,
                  "name": "sender",
                  "nodeType": "VariableDeclaration",
                  "scope": 366,
                  "src": "601:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 352,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "601:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "600:16:7"
            },
            "returnParameters": {
              "id": 355,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "624:0:7"
            },
            "scope": 367,
            "src": "581:96:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 368,
        "src": "315:365:7"
      }
    ],
    "src": "0:682:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.6",
  "updatedAt": "2019-04-15T15:09:46.821Z",
  "devdoc": {
    "details": "This contract holds all the minimum required functionality for a behavior to be upgradeable.\r This means, required state variables for owned upgradeability purpose and simple initialization validation.\r",
    "methods": {
      "getImplementation()": {
        "details": "Tells the address of the current implementation\r",
        "return": "address of the current implementation\r"
      },
      "initialize(address)": {
        "details": "Validates the caller is the versions registry.\r THIS FUNCTION SHOULD BE OVERRIDDEN CALLING SUPER\r",
        "params": {
          "sender": "representing the address deploying the initial behavior of the contract\r"
        }
      }
    },
    "title": "Upgradeable\r"
  },
  "userdoc": {
    "methods": {}
  }
}